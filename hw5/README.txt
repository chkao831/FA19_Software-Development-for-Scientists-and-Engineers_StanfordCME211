"""README.txt: This is the text description of HW5 of CME211 Autumn19-20."""
Should include brief statement of the problem, description of C++ code, and
brief summary of code verificaiton with python file. 

author = "Carolyn (Chih-Hsuan) Kao"
email  = "chkao831@stanford.edu"
date   = "Nov 3, 2019"

Problem: Right Hand Wall Following Algorithm

The program reads a maze from a maze file, computes the maze path using the
Right Hand Wall Following Algorithm and then writes the solution into a file.

Basically, we assume that the maze is simply connected, i.e. all its walls 
are connecteed together or to the maze's outer boundary. In the writeup, 
it is also specified that the given maze files for us would always have 
entrance in the first row and exit in the last row. Hence, starting from the
first row, by keeping right hand on the wall of the maze, the solver is
guaranteed to reach the exit (supposed to be on the last row) in this case. 

[C++ file: mazesolver.cpp]
Speaking to the C++ code, I have 5 other functions in addition to the main
function. My main function is in charged of reading in command line arguments,
storing the maze in a static array by putting binary 1 if wall is present, 
finding entrance and exit index of the maze, and then using RH Algo to 
move through the maze and finally store the path in pairs into a text file 
specified by the user in the command line. 
The other 5 functions are
checkForward: helps determine if there's wall in the front. 
checkRight: helps determine if there's wall at the right. 
moveForward: moves the position of solver one step forward. 
turnLeft: changes the direction 90 degree to the left. 
turnRight: changes the direction 90 degree to the right. 
Among all global variables, I would like to point out that the static array
that stores the maze is static, that is, it has memory location preserved 
between function calls. And once initialized, its size is fixed and would 
retain between function calls. An overflow_error would be thrown if the static
array is not large enough for the storage of the maze upon RunTime. 

[Python file: checksoln.py]
Regarding the python file that verifies the maze solution generated by the C++
file, it has two functions that create sets and returns useful integer variables
for testing usage, and has 4 checking functions that return boolean variables.
I use numpy.ndarray to store the information from files. 
In checkIntoWall, by verifying the intersection of solution path and the
maze wall is empty, we assert that we don't run into wall. 
In checkSameEntranceExit, by verifying we get same entrance and same exit 
in both maze and solution file, we assert we have same ones. 
In checkValidOneMove, by verifying that the Euclidean distance between 
every two move is (approximately) 1.0, we assert that all moves are valid
one step. 
In checkWithinBound, by verifying that every passed-in row/column indices
from the solution file is within the row/column bound of the maze, we
assert that nothing is out of bound. 
If all four checking function returns true, I suppose the solution is valid
and print out result to command line like
$ python3 checksoln.py maze1.txt solution1.txt
Solution is valid!
$ python3 checksoln.py maze2.txt solution2.txt
Solution is valid!
$ python3 checksoln.py maze3.txt solution3.txt
Solution is valid!

